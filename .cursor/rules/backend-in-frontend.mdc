---
description: 
globs: 
alwaysApply: true
---
# Бекенд взаимодействие

## Аутентификация

### JWT Токен
```typescript
interface JWTPayload {
  createdAt: number;      // Время создания токена
  exp: number;           // Время истечения токена
  iat: number;          // Время выпуска токена
  id: number;           // ID пользователя
  linkedWallet: string; // Привязанный кошелек
  subExpAt: number;     // Время истечения подписки
  topupWallet: string;  // Кошелек для пополнения
}
```
### Ответ после оплаты
```typescript
interface PaymentResponse {
  accessToken: string;         // Токен доступа для сессии
  expireAt: string;           // Время истечения токена
  hasSubscription: boolean;    // Статус подписки
  success: boolean;           // Статус операции
}
```

## WebSocket Сообщения

### NewSignalMessage
Полное сообщение о новом токене:
```typescript
interface NewSignalMessage {
  token: string;           // Адрес токена
  name: string;           // Имя токена
  symbol: string;         // Символ токена
  logo: string;          // URL логотипа
  tokenCreatedAt: int64; // Время создания токена
  createdAt: int64;      // Время создания сигнала
  market: {
    circulatingSupply: float64; // Циркулирующее предложение
    price: float64;            // Цена
  };
  holdings: {
    top10: float64;          // Топ 10 холдеров (%)
    devHolds: float64;       // Холды разработчиков (%)
    insidersHolds: float64;  // Инсайдерские холды (%)
    first70: float64;        // Первые 70 холдеров (%)
  };
  socials?: {               // Опциональные соц. сети
    x?: string;            // Twitter
    web?: string;          // Веб-сайт
    tg?: string;          // Telegram
  };
  trades: Trades[];        // История торгов
}
```

### UpdateSignalMessage
Частичное обновление данных токена:
```typescript
interface UpdateSignalMessage {
  token: string;          // Обязательное поле - идентификатор
  market?: {             // Опциональные рыночные данные
    circulatingSupply?: float64;
    price?: float64;
  };
  holdings?: {           // Опциональные данные холдингов
    top10?: float64;
    devHolds?: float64;
    insidersHolds?: float64;
    first70?: float64;
  };
  trades?: Trades[];     // Опциональные данные торгов
}
```

### Trades
Информация о торгах:
```typescript
interface Trades {
  signer: string;     // Адрес подписавшего
  amtSol: float64;    // Количество SOL
  timestamp: int64;   // Временная метка
}
```

## Логика обработки

1. When you connect the wallet:
   - A request is sent to sign the message
   - After signing we receive a JWT token
   - The JWT token contains information about the user and subscription

2. On successful payment:
   - We receive PaymentResponse with accessToken
   - The token is stored for the duration of the session
   - Used for all subsequent requests
   - Checked hasSubscription for access to functionality

3. WebSocket connection:
   - Established after successful authentication
   - Uses JWT token for authorization

4. processing NewSignalMessage:
   - Creates a new token card
   - Displays all available data
   - Social networks are optional

5. UpdateSignalMessage processing:
   - Updates only the fields that are present
   - Keeps the data unchanged
   - Checks undefined for social networks

6. Data validation:
   - Checks for the presence of mandatory token field
   - Data type validation
   - Handling missing fields

## Примеры

### Пример NewSignalMessage
```json
{
  "token": "AxSMXaM3KeQ3a6HDfGizJaRnzGqrDHJg3uyZbwZUpump",
  "name": "Sarah",
  "symbol": "SARAH",
  "logo": "https://pump.mypinata.cloud/ipfs/QmT4aKNbU4RhW3yBVkG936exLgXDHVE54F9vft1fN3h4TX",
  "tokenCreatedAt": 1744317279,
  "market": {
    "circulatingSupply": 999998593,
    "price": 0.00022113577
  },
  "holdings": {
    "top10": 69.8007,
    "devHolds": 0.4344512167151619,
    "insidersHolds": 45.1484,
    "first70": 0
  },
  "socials": {
    "web": "https://VTuber.fun"
  }
}
```