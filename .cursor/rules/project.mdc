---
description: 
globs: 
alwaysApply: true
---
### Полное описание проекта Crypto Dashboard

## Обзор проекта

Crypto Dashboard — это одностраничное веб-приложение, предназначенное для отслеживания криптовалютных активов в реальном времени. Проект представляет собой интерактивную платформу, которая отображает информацию о различных криптовалютах в виде карточек с детальной информацией. Основная цель проекта — предоставить пользователям удобный инструмент для мониторинга рынка криптовалют с акцентом на данные о "китах" (крупных держателях) и ключевых показателях токенов.

## Стек технологий

Проект построен на современном стеке веб-технологий:

1. **Frontend Framework**:

1. **Next.js 14+** (App Router) — React-фреймворк с серверными компонентами
2. **React 18+** — библиотека для создания пользовательских интерфейсов



2. **Стилизация**:

1. **Tailwind CSS** — утилитарный CSS-фреймворк
2. **shadcn/ui** — библиотека компонентов, построенная на Radix UI и Tailwind



3. **Иконки и UI**:

1. **Lucide React** — библиотека иконок
2. **Radix UI** — примитивы для создания доступных компонентов



4. **Типизация**:

1. **TypeScript** — для статической типизации кода



5. **Интеграции**:

1. **Solana Web3.js** (имитация) — для взаимодействия с блокчейном Solana
2. **WebSocket** (имитация) — для получения данных в реальном времени



6. **Аутентификация**:

1. **JWT** — для аутентификации и авторизации пользователей



7. **Сборка и разработка**:

1. **ESLint** — для статического анализа кода
2. **Prettier** — для форматирования кода





## Структура проекта

```plaintext
crypto-dashboard/
├── app/                  # Файлы маршрутизации Next.js App Router
│   ├── layout.tsx        # Корневой компонент макета
│   ├── page.tsx          # Главный компонент страницы
│   └── globals.css       # Глобальные стили CSS
├── components/           # React-компоненты
│   ├── crypto-card.tsx   # Компонент карточки криптовалюты
│   ├── header.tsx        # Компонент заголовка
│   ├── payment-modal.tsx # Модальное окно оплаты
│   └── ui/               # Компоненты shadcn/ui
├── lib/                  # Утилиты и типы
│   ├── api.ts            # Функции API
│   ├── mock-data.ts      # Моковые данные для разработки
│   ├── types.ts          # Определения типов TypeScript
│   ├── utils.ts          # Вспомогательные функции
│   └── websocket.ts      # Реализация клиента WebSocket
├── public/               # Статические ресурсы
└── tailwind.config.ts    # Конфигурация Tailwind CSS
```

## Ключевые функции и возможности

1. **Аутентификация через криптокошелек**:

1. Подключение кошелька Phantom (Solana)
2. Подписание сообщения для верификации
3. Получение JWT-токена для авторизации



2. **Система подписки**:

1. Проверка статуса подписки пользователя
2. Модальное окно для пополнения кошелька
3. QR-код и адрес для оплаты
4. Проверка статуса платежа



3. **Отображение данных о криптовалютах**:

1. Сетка карточек с информацией о токенах
2. Детальная информация о каждом токене
3. Данные о "китах" (крупных держателях)
4. Индикаторы производительности токена



4. **Обновление данных в реальном времени**:

1. WebSocket-соединение для получения актуальных данных
2. Автоматическое добавление новых карточек
3. Поддержание фиксированного размера сетки (4x4)



5. **Интерактивные элементы**:

1. Всплывающие подсказки с дополнительной информацией
2. Копирование адреса контракта в буфер обмена
3. Ссылки на социальные сети и биржи





## Пользовательский поток

1. **Начальное состояние**:

1. Пользователь видит пустой дашборд с "скелетными" карточками
2. Необходимо подключить кошелек для доступа к данным



2. **Подключение кошелька**:

1. Пользователь нажимает "Connect Phantom"
2. Происходит подписание сообщения для верификации
3. Система проверяет наличие активной подписки



3. **Процесс подписки**:

1. Если подписки нет, открывается модальное окно оплаты
2. Пользователь отправляет 0.5 SOL на указанный адрес
3. После проверки платежа, подписка активируется



4. **Работа с дашбордом**:

1. После активации подписки отображаются карточки с данными
2. Данные обновляются в реальном времени через WebSocket
3. Новые карточки добавляются в начало сетки





## Технические детали реализации

### Аутентификация и авторизация

Система использует JWT (JSON Web Tokens) для аутентификации пользователей:

1. Пользователь подключает кошелек Phantom
2. Подписывает сообщение своим приватным ключом
3. Подпись отправляется на сервер для верификации
4. Сервер возвращает JWT-токен с информацией о пользователе и подписке
5. Токен содержит:

1. ID пользователя
2. Адрес подключенного кошелька
3. Адрес для пополнения
4. Срок действия подписки
5. Токен доступа





### Система реального времени

Для обновления данных в реальном времени используется WebSocket:

1. После активации подписки устанавливается WebSocket-соединение
2. Сервер отправляет обновленные данные о криптовалютах
3. Клиент обрабатывает полученные данные и обновляет интерфейс
4. Новые карточки добавляются в начало сетки, старые удаляются


### Компонент карточки криптовалюты

Каждая карточка содержит:

1. **Заголовок**:

1. Логотип криптовалюты
2. Название и символ
3. Кнопка копирования адреса контракта



2. **Обзор**:

1. Рыночная капитализация
2. Возраст токена
3. Распределение токенов (Top10, кошелек разработчика и т.д.)
4. Процент инсайдеров



3. **Данные о "китах"**:

1. Кнопка "View whales" с всплывающей информацией
2. Количество "китов" и их холдинги



4. **Социальные сети и производительность**:

1. Ссылки на Telegram, Twitter, веб-сайт
2. Индикатор изменения цены



5. **Кнопки покупки**:

1. Ссылки на биржи для покупки токена





## Дизайн и пользовательский опыт

Проект выполнен в темной цветовой схеме, что соответствует современным тенденциям в дизайне криптовалютных платформ:

1. **Цветовая палитра**:

1. Темный фон (`#121212`)
2. Акцентный цвет (зеленый для положительных значений, красный для отрицательных)
3. Пурпурный для кнопок подключения кошелька



2. **Типографика**:

1. Системный шрифт Inter для оптимальной читаемости
2. Иерархия размеров текста для улучшения восприятия информации



3. **Компоненты интерфейса**:

1. Карточки с тонкими границами для четкого разделения контента
2. Всплывающие подсказки для дополнительной информации
3. Интерактивные элементы с визуальной обратной связью



4. **Отзывчивый дизайн**:

1. Адаптация под различные размеры экранов
2. Сетка карточек меняет количество колонок в зависимости от ширины экрана





## Целевая аудитория

Проект ориентирован на следующие группы пользователей:

1. **Криптовалютные трейдеры**:

1. Профессионалы, которым нужна актуальная информация о рынке
2. Трейдеры, отслеживающие активность "китов" для принятия решений



2. **Инвесторы**:

1. Люди, вкладывающие в криптовалюты и нуждающиеся в мониторинге своих инвестиций
2. Инвесторы, интересующиеся распределением токенов и активностью разработчиков



3. **Энтузиасты криптовалют**:

1. Пользователи, следящие за новыми проектами и токенами
2. Люди, интересующиеся технологией блокчейн и криптовалютами





## Перспективы развития

Проект имеет потенциал для дальнейшего развития:

1. **Расширение функциональности**:

1. Добавление графиков цен и объемов торгов
2. Интеграция с большим количеством бирж
3. Система уведомлений о значительных изменениях



2. **Улучшение пользовательского опыта**:

1. Персонализация дашборда
2. Фильтрация и сортировка карточек
3. Темная/светлая тема



3. **Технические улучшения**:

1. Оптимизация производительности
2. Кэширование данных
3. Расширение поддержки кошельков (MetaMask, WalletConnect и др.)





## Заключение

Crypto Dashboard — это современное веб-приложение, предоставляющее пользователям удобный инструмент для мониторинга криптовалютного рынка с фокусом на данные о "китах" и ключевых показателях токенов. Проект использует современный стек технологий, включая Next.js, React, Tailwind CSS и shadcn/ui, для создания отзывчивого и интуитивно понятного интерфейса. Система подписки и аутентификации через криптокошелек обеспечивает безопасный доступ к данным, а WebSocket-соединение позволяет получать обновления в реальном времени.